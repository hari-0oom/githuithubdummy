######################    Documentation      #############################

untracked  				- new file
modified   				- existing file changed
staged     				- ready to be commited 
commited/ unmodifies	- snapshot of current state is saved in our vcs(here git)


1. git clone <https://... link>   ----> can copy the whole repository from source link to local pc, can be executec in an uninitialized repository





2. git init   -----> to initialize a normal directory to a git repository


3. git status   -------> status of files in git repository

4. git add .  -----> stage (getting ready to be commited) all files  

5. git add file1.txt file2.py file3.cpp ...    -----> stages the specified files

6. git commit -m "meaningfull message that tell the purpose ot this commit"  ----> commits all the files that has been staged using add command

7. git reset [file name] -----> unsrtage staged changes, if we add somw file by mistake we can unstage them like this

8. git reset    ------>   undtage all files in staged area

9. git remote add origin <link>   ----->  here we added the link for remote repository, by default changes will be pushed here, when we clone a 
											project we don't need to dot his step, but when we create a new project from scratch in out local machine, 
											it does not know the path to the remote repository, "origin" is the name given to the reference. There can be 
											multiple reomte repository with different names


10. git remote -v    ------>  to verify/ check the remote repository

11. git remote rename origin coco    -----> renames the nickname of remote repository from "origin" to "coco", generally  not recomended

12. git push [origin] [master] ----->   origin is the nick name for the remote branch and master is the the branch to be pushed

13.git push -u [origin] [master]   ----->  in future we need not specify "origin main" over and over again, simply use git push from now on

14. git push   ------>   pushes the current branch source branch of source
 





15. git branch new [newBranchName]     ------>  creates a new branch out of the current branch u are present on

16. git branch -d/-D [branchToBeDeleted]    ------> deletes the specified branch

17. git merge [branch_Name]    -------> does not merge the current branch into its parent branch. Instead, it merges the specified branchName into the current branch.

18. git [branchName] -m [newBranchName]   ------> renames the branch from "branchName" to "newBranchName"

19. git branch -----> shows all branches for current repository

20. git branch -a      --------> lists all branch local as well as remote branch

21. git branch --merged     --------->  Lists branches that have been merged into the current branch.

22. git log [branchName]   -------->  Shows the commit history of branchName

23. git cheackout [destination_branch]     ------> change branch

24. git checkout -b [newBranch]    ------>  create a new branch and moves to that branch

25. git fetch    -------> Fetches changes from remote repositories, including new branches.

26. git pull    -------> fetch + merge

27. git push origin --delete [branchName]     ------> Deletes a remote branch named branchName.



28. git diff [branchName]    ------>  comapres current branch to specified branch

29. git log -----> to se history of commits

30. git reset HEAD~1   ----->  removes last 1 commit, cnage the number according to the number of commits u want to remove

31. git reset [commit hash]  ----->  generally it is hard to remember the sequence of commits but we can recall by looking at their commit
								messages and we can rollback/ reset to that particular point by using their hash, hash can be found using git looking

32. 

